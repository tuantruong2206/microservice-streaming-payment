server:
  port: 8070

spring:
  cloud:
    stream:
      instance-count: 2
      instance-index: 0
      function:
        definition: orderPaymentProcess  # active 4 processes of kafka stream
      kafka:
        binder:
          configuration:
            commit.interval.ms: 100
            default:
              key.serde: org.apache.kafka.common.serialization.Serdes$StringSerde
              value.serde: org.apache.kafka.common.serialization.Serdes$JsonSerde
          brokers: 10.218.188.198:9092
          autoAddPartitions: true
          minPartitionCount: 4
          replicationFactor: 1
        streams:
          binder:
            configuration:
              application.server: localhost:8090
            functions:
              #            #APPLICATION ID if we have more than one stream app within same springboot
              orderPaymentProcess:
                applicationId: order-payment-process-id-instance
            state-store-retry:
              max-attempts: 3
              backoff-period: 2000
      bindings:
        orderPaymentProcess-in-0:
          destination: microservice-orders
          contentType: application/json
#          nativeDecoding: false
          useNativeDecoding: false
          consumer:
            keySerde: org.apache.kafka.common.serialization.Serdes$StringSerde
            valueSerde: org.apache.kafka.common.serialization.Serdes$JsonSerde
        orderPaymentProcess-out-0:
          producer:
            keySerde: org.apache.kafka.common.serialization.Serdes$LongSerde
            valueSerde: org.apache.kafka.common.serialization.Serdes$JsonSerde
          destination: microservice-verified-orders
          contentType: application/json




